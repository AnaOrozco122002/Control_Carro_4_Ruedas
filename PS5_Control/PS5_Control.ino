//Librerias
#include <ps5.h>
#include <ps5Controller.h>
#include <ps5_int.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

//Varaibles

//Pantalla
#define i2c_Address 0x3c //initialize with the I2C addr 0x3C Typically eBay OLED's
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET -1   //   QT-PY / XIAO
Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
// ============
#define FRAME_DELAY (150)
#define FRAME_WIDTH (64)
#define FRAME_HEIGHT (64)
#define FRAME_COUNT (sizeof(coronaimage_1) / sizeof(coronaimage_1[0]))
//variables texto:
char message[] = "S O F I A S";
int x, minX;



// 'image_1', 64x64px
const unsigned char coronaimage_1 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x0f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0x07, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x03, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0x0e, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x40, 0x78, 0x0c, 0x01, 0xc6, 0x00, 
  0x00, 0x03, 0xc0, 0x38, 0x0c, 0x00, 0xc6, 0x00, 0x00, 0x1f, 0xc0, 0x18, 0x0c, 0x00, 0xc6, 0x00, 
  0x00, 0x3f, 0xc0, 0x1c, 0x0c, 0x00, 0xc6, 0x00, 0x00, 0x31, 0x80, 0x0c, 0x0c, 0x00, 0xc6, 0x00, 
  0x00, 0x31, 0xc0, 0x0c, 0x0e, 0x01, 0xc6, 0x00, 0x00, 0x31, 0xc0, 0x1c, 0x06, 0x03, 0x86, 0x00, 
  0x00, 0x38, 0xc0, 0x18, 0x07, 0x87, 0x06, 0x00, 0x00, 0x18, 0xe0, 0x38, 0x03, 0xfe, 0x06, 0x00, 
  0x00, 0x18, 0x78, 0xf0, 0x00, 0xfc, 0x06, 0x00, 0x00, 0x18, 0x3f, 0xe0, 0x00, 0x00, 0x06, 0x00, 
  0x00, 0x18, 0x0f, 0x81, 0xf0, 0x00, 0x06, 0x00, 0x00, 0x1c, 0x00, 0x03, 0xf8, 0x00, 0x06, 0x00, 
  0x00, 0x0c, 0x00, 0x03, 0x1c, 0x00, 0x06, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x0c, 0x00, 0x06, 0x00, 
  0x00, 0x0c, 0x00, 0x06, 0x0c, 0x00, 0x06, 0x00, 0x00, 0x0e, 0x00, 0x06, 0x0e, 0x18, 0x06, 0x00, 
  0x00, 0x06, 0x00, 0x06, 0x0c, 0x08, 0x06, 0x00, 0x00, 0x06, 0x03, 0x03, 0x0c, 0x00, 0x06, 0x00, 
  0x00, 0x06, 0x03, 0x03, 0x9c, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x01, 0xf8, 0x00, 0x06, 0x00, 
  0x00, 0x07, 0x00, 0x00, 0xf0, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 
  0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 
  0x00, 0x03, 0x80, 0x3f, 0xff, 0xff, 0x86, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x06, 0x00, 
  0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x06, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x0e, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x01, 0x80, 0x01, 0xff, 0xff, 0xfc, 0x00, 
  0x00, 0x01, 0x87, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'image_2', 64x64px
const unsigned char coronaimage_2 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7f, 0x01, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x1c, 0x0f, 0x83, 0xff, 0x00, 0x00, 0x00, 0x00, 0x38, 0x07, 0x01, 0xc7, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0x06, 0x00, 0xc3, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0e, 0x00, 0xe3, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0x0e, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0c, 0x00, 0x63, 0x00, 
  0x00, 0x00, 0x00, 0x1c, 0x0e, 0x00, 0xe3, 0x00, 0x00, 0x00, 0x60, 0x0c, 0x06, 0x00, 0xc3, 0x80, 
  0x00, 0x00, 0xe0, 0x0e, 0x07, 0x01, 0xc3, 0x80, 0x00, 0x03, 0xe0, 0x06, 0x03, 0x83, 0x81, 0x80, 
  0x00, 0x0f, 0xe0, 0x06, 0x03, 0xff, 0x81, 0x80, 0x00, 0x1e, 0x60, 0x06, 0x00, 0xfe, 0x01, 0x80, 
  0x00, 0x18, 0x60, 0x06, 0x00, 0x10, 0x01, 0x80, 0x00, 0x1c, 0x70, 0x0e, 0x00, 0x00, 0x01, 0x80, 
  0x00, 0x0c, 0x38, 0x1c, 0x08, 0x00, 0x01, 0x80, 0x00, 0x0e, 0x3c, 0x78, 0x3e, 0x00, 0x01, 0xc0, 
  0x00, 0x06, 0x0f, 0xf0, 0x7f, 0x00, 0x00, 0xc0, 0x00, 0x07, 0x07, 0xc0, 0xe3, 0x80, 0x00, 0xc0, 
  0x00, 0x03, 0x00, 0x00, 0xc1, 0x83, 0x00, 0xc0, 0x00, 0x03, 0x00, 0x00, 0xc1, 0xc1, 0x00, 0xc0, 
  0x00, 0x03, 0x80, 0x00, 0xc0, 0xc0, 0x00, 0xc0, 0x00, 0x01, 0x80, 0x00, 0xe1, 0xc0, 0x00, 0xc0, 
  0x00, 0x01, 0xc0, 0x00, 0x61, 0x80, 0x00, 0xe0, 0x00, 0x00, 0xc0, 0x20, 0x3f, 0x80, 0x00, 0xe0, 
  0x00, 0x00, 0xc0, 0x30, 0x1f, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x04, 0x00, 0x7f, 0xe0, 
  0x00, 0x00, 0x60, 0x00, 0x00, 0x07, 0xf8, 0x70, 0x00, 0x00, 0x70, 0x00, 0x00, 0x7f, 0xc0, 0x70, 
  0x00, 0x00, 0x30, 0x00, 0x07, 0xfc, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x3f, 0xc0, 0x01, 0xf0, 
  0x00, 0x00, 0x38, 0x03, 0xfe, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x18, 0x1f, 0xe0, 0x01, 0xff, 0x00, 
  0x00, 0x00, 0x1d, 0xfe, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x0f, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x7f, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x06, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3f, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'image_3', 64x64px
const unsigned char coronaimage_3 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1f, 0x81, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x38, 0x03, 0x83, 0xff, 0x00, 0x00, 0x00, 0x00, 0x70, 0x07, 0x01, 0xc7, 0x00, 
  0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0xc3, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0e, 0x00, 0xe3, 0x00, 
  0x00, 0x00, 0x00, 0x38, 0x0c, 0x00, 0xe3, 0x00, 0x00, 0x00, 0x40, 0x1c, 0x0c, 0x00, 0xe3, 0x00, 
  0x00, 0x01, 0xe0, 0x0c, 0x0e, 0x00, 0xc3, 0x00, 0x00, 0x07, 0xe0, 0x0e, 0x06, 0x01, 0xc3, 0x00, 
  0x00, 0x1f, 0xc0, 0x0e, 0x07, 0x03, 0x83, 0x00, 0x00, 0x3c, 0xc0, 0x0e, 0x03, 0xef, 0x83, 0x00, 
  0x00, 0x18, 0xe0, 0x0e, 0x01, 0xff, 0x03, 0x00, 0x00, 0x18, 0x60, 0x0c, 0x00, 0x78, 0x03, 0x00, 
  0x00, 0x1c, 0x70, 0x1c, 0x00, 0x00, 0x03, 0x80, 0x00, 0x0c, 0x3c, 0x78, 0x7c, 0x00, 0x03, 0x80, 
  0x00, 0x0c, 0x1f, 0xf0, 0xfe, 0x00, 0x03, 0x80, 0x00, 0x0e, 0x07, 0xc0, 0xc7, 0x00, 0x01, 0x80, 
  0x00, 0x06, 0x00, 0x01, 0x83, 0x00, 0x01, 0x80, 0x00, 0x06, 0x00, 0x01, 0x83, 0x06, 0x01, 0x80, 
  0x00, 0x07, 0x00, 0x01, 0x83, 0x86, 0x01, 0x80, 0x00, 0x03, 0x00, 0x01, 0x83, 0x00, 0x01, 0x80, 
  0x00, 0x03, 0x00, 0x01, 0xc3, 0x00, 0x01, 0x80, 0x00, 0x03, 0x80, 0x40, 0xe7, 0x00, 0x01, 0x80, 
  0x00, 0x01, 0x80, 0xc0, 0x7e, 0x00, 0x01, 0x80, 0x00, 0x01, 0xc0, 0x00, 0x3c, 0x00, 0x07, 0x80, 
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xc0, 
  0x00, 0x00, 0xe0, 0x00, 0x07, 0xff, 0x80, 0xc0, 0x00, 0x00, 0x60, 0x00, 0xff, 0xe0, 0x00, 0xc0, 
  0x00, 0x00, 0x60, 0x0f, 0xfc, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x70, 0xff, 0x80, 0x00, 0x3f, 0xe0, 
  0x00, 0x00, 0x3f, 0xf8, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0x80, 0x00, 0xff, 0xfe, 0x00, 
  0x00, 0x00, 0x38, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x38, 0x03, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x19, 0xff, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'image_4', 64x64px
const unsigned char coronaimage_4 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1f, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x80, 0x7c, 0x78, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc1, 0xf0, 0x1e, 0x00, 0x00, 0x00, 
  0x00, 0x7e, 0xe0, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x78, 0x70, 0x07, 0x00, 0x00, 0x00, 
  0x00, 0x78, 0x3c, 0x30, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x3c, 0x30, 0x1c, 0x03, 0xc0, 0x00, 
  0x00, 0x7e, 0xf0, 0x38, 0x38, 0x03, 0xfc, 0x00, 0x00, 0x66, 0xc0, 0x30, 0x38, 0x01, 0xfe, 0x00, 
  0x00, 0x67, 0xc0, 0x70, 0x38, 0x01, 0x8c, 0x00, 0x00, 0x63, 0xe0, 0xe0, 0x38, 0x03, 0x8c, 0x00, 
  0x00, 0x63, 0xff, 0xe0, 0x1c, 0x03, 0x0c, 0x00, 0x00, 0x61, 0x3f, 0x80, 0x0e, 0x0f, 0x1c, 0x00, 
  0x00, 0x60, 0x00, 0x0f, 0x87, 0xfe, 0x18, 0x00, 0x00, 0x60, 0x00, 0x1f, 0xc3, 0xf8, 0x18, 0x00, 
  0x00, 0x60, 0x00, 0x38, 0xe0, 0x00, 0x18, 0x00, 0x00, 0x60, 0x00, 0x30, 0x60, 0x00, 0x38, 0x00, 
  0x00, 0x60, 0x10, 0x30, 0x60, 0x00, 0x30, 0x00, 0x00, 0x60, 0x30, 0x30, 0x60, 0x00, 0x30, 0x00, 
  0x00, 0x60, 0x10, 0x30, 0x60, 0x80, 0x30, 0x00, 0x00, 0x60, 0x00, 0x30, 0xc1, 0xc0, 0x70, 0x00, 
  0x00, 0x60, 0x00, 0x1f, 0xc0, 0x80, 0x60, 0x00, 0x00, 0x60, 0x00, 0x0f, 0x80, 0x00, 0x60, 0x00, 
  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0xff, 0xfc, 0x00, 0x00, 0xe0, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0xc0, 0x00, 0x00, 0x7f, 0xe0, 0x1f, 0xff, 0x80, 0xc0, 0x00, 
  0x00, 0x60, 0x00, 0x00, 0x1f, 0xf0, 0xc0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 
  0x00, 0x60, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0x03, 0x80, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xfe, 0x01, 0x80, 0x00, 0x00, 0x78, 0x00, 0x00, 0xff, 0xc1, 0x80, 0x00, 
  0x00, 0x3e, 0x00, 0x00, 0x07, 0xf9, 0x80, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x7f, 0x80, 0x00, 
  0x00, 0x03, 0xff, 0xf8, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'image_5', 64x64px
const unsigned char coronaimage_5 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3c, 0x07, 0x80, 0x00, 0x00, 0x00, 
  0x01, 0xf0, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x1f, 0xfc, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0xf8, 0x39, 0xc0, 0x78, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x70, 0xe0, 0x3c, 0x00, 0x00, 0x00, 
  0x00, 0xce, 0xe0, 0x60, 0x0e, 0x00, 0x00, 0x00, 0x01, 0xc7, 0xc0, 0x60, 0x1f, 0x00, 0x00, 0x00, 
  0x01, 0xc7, 0x80, 0x60, 0x3e, 0x00, 0x00, 0x00, 0x01, 0x83, 0x80, 0x60, 0x70, 0x00, 0x00, 0x00, 
  0x01, 0x83, 0xc1, 0xe0, 0x60, 0x04, 0x00, 0x00, 0x01, 0x80, 0xff, 0xc0, 0x60, 0x0f, 0x00, 0x00, 
  0x01, 0x80, 0x7f, 0x80, 0x60, 0x07, 0xc0, 0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x07, 0xf0, 0x00, 
  0x01, 0x80, 0x00, 0x7c, 0x70, 0x06, 0x78, 0x00, 0x03, 0x80, 0x00, 0xfe, 0x38, 0x0e, 0x30, 0x00, 
  0x03, 0x00, 0x01, 0xc7, 0x1f, 0x3c, 0x70, 0x00, 0x03, 0x01, 0x81, 0x83, 0x0f, 0xf8, 0x60, 0x00, 
  0x03, 0x00, 0x81, 0x83, 0x03, 0xe0, 0x60, 0x00, 0x03, 0x00, 0x01, 0x83, 0x00, 0x00, 0xe0, 0x00, 
  0x03, 0x00, 0x01, 0x83, 0x00, 0x00, 0xc0, 0x00, 0x03, 0x00, 0x01, 0x86, 0x00, 0x01, 0xc0, 0x00, 
  0x07, 0x00, 0x01, 0xfe, 0x08, 0x01, 0x80, 0x00, 0x07, 0xff, 0x80, 0xfc, 0x0c, 0x03, 0x80, 0x00, 
  0x07, 0xff, 0xfe, 0x30, 0x00, 0x03, 0x00, 0x00, 0x06, 0x00, 0xff, 0xe0, 0x00, 0x07, 0x00, 0x00, 
  0x0e, 0x00, 0x03, 0xfc, 0x00, 0x06, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x3f, 0x80, 0x06, 0x00, 0x00, 
  0x0f, 0xfc, 0x00, 0x07, 0xe0, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0xf8, 0x0c, 0x00, 0x00, 
  0x0e, 0x7f, 0xff, 0x00, 0x3e, 0x1c, 0x00, 0x00, 0x0f, 0x00, 0x1f, 0xf0, 0x0f, 0x98, 0x00, 0x00, 
  0x03, 0xc0, 0x01, 0xfc, 0x03, 0xf8, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x1f, 0x80, 0xf0, 0x00, 0x00, 
  0x00, 0x7f, 0x00, 0x07, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0xf8, 0x70, 0x00, 0x00, 
  0x00, 0x01, 0xfc, 0x00, 0x3e, 0x60, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xfc, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf1, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'image_6', 64x64px
const unsigned char coronaimage_6 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x78, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x80, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3e, 0x78, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x80, 0xf8, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe0, 0x0f, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xc0, 0xf0, 0x07, 0x80, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x30, 0x0e, 0x03, 0xc0, 0x00, 
  0x00, 0x63, 0x80, 0x38, 0x1c, 0x03, 0xfc, 0x00, 0x00, 0x63, 0x00, 0x18, 0x18, 0x01, 0xfe, 0x00, 
  0x00, 0x63, 0x80, 0x18, 0x18, 0x01, 0x8e, 0x00, 0x00, 0x61, 0x80, 0x38, 0x18, 0x01, 0x8e, 0x00, 
  0x00, 0x61, 0xc0, 0x70, 0x1c, 0x03, 0x8c, 0x00, 0x00, 0x70, 0xff, 0xe0, 0x0e, 0x07, 0x0c, 0x00, 
  0x00, 0x70, 0x7f, 0xc3, 0x87, 0xff, 0x0c, 0x00, 0x00, 0x70, 0x0e, 0x0f, 0xc3, 0xfc, 0x1c, 0x00, 
  0x00, 0x30, 0x00, 0x1e, 0xe0, 0x70, 0x1c, 0x00, 0x00, 0x30, 0x00, 0x18, 0x70, 0x00, 0x18, 0x00, 
  0x00, 0x30, 0x00, 0x18, 0x30, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x38, 0x30, 0x00, 0x18, 0x00, 
  0x00, 0x30, 0x18, 0x18, 0x30, 0x00, 0x18, 0x00, 0x00, 0x30, 0x08, 0x18, 0x70, 0xe0, 0x38, 0x00, 
  0x00, 0x30, 0x00, 0x1c, 0xe0, 0x40, 0x30, 0x00, 0x00, 0x30, 0x00, 0x0f, 0xc0, 0x00, 0x30, 0x00, 
  0x00, 0x30, 0x00, 0x07, 0x80, 0x00, 0x30, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
  0x00, 0x38, 0x3f, 0xff, 0xfc, 0x00, 0x70, 0x00, 0x00, 0x1b, 0xff, 0xff, 0xff, 0xe0, 0x60, 0x00, 
  0x00, 0x1f, 0xf0, 0x00, 0x07, 0xfc, 0x60, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 
  0x00, 0x18, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x18, 0x07, 0xff, 0xe0, 0x00, 0xe0, 0x00, 
  0x00, 0x39, 0xff, 0xff, 0xff, 0x80, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0x00, 0xff, 0xf8, 0xe0, 0x00, 
  0x00, 0x3f, 0x80, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 
  0x00, 0x1f, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x07, 0xc0, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'image_7', 64x64px
const unsigned char coronaimage_7 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x80, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x07, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x0e, 0xe0, 0x1f, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x70, 0x7c, 0x1f, 0x00, 0x00, 0x00, 
  0x00, 0x78, 0x3c, 0xf0, 0x07, 0x80, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0xf0, 0x07, 0x03, 0xfc, 0x00, 
  0x00, 0x1e, 0xf0, 0x78, 0x0e, 0x01, 0xfe, 0x00, 0x00, 0x1e, 0xc0, 0x18, 0x0c, 0x00, 0xc6, 0x00, 
  0x00, 0x7f, 0xc0, 0x1c, 0x1c, 0x00, 0xc6, 0x00, 0x00, 0x33, 0x80, 0x1c, 0x1c, 0x00, 0xc6, 0x00, 
  0x00, 0x33, 0x80, 0x1c, 0x0c, 0x01, 0xc6, 0x00, 0x00, 0x31, 0xc0, 0x18, 0x0e, 0x03, 0x86, 0x00, 
  0x00, 0x30, 0xe0, 0x38, 0x07, 0xdf, 0x06, 0x00, 0x00, 0x38, 0x7f, 0xf0, 0xc3, 0xfe, 0x06, 0x00, 
  0x00, 0x38, 0x3f, 0xe3, 0xf0, 0xf8, 0x0e, 0x00, 0x00, 0x18, 0x0f, 0x07, 0xf8, 0x00, 0x0e, 0x00, 
  0x00, 0x18, 0x00, 0x06, 0x18, 0x00, 0x0e, 0x00, 0x00, 0x18, 0x00, 0x0c, 0x18, 0x00, 0x0c, 0x00, 
  0x00, 0x18, 0x00, 0x0c, 0x1c, 0x00, 0x0c, 0x00, 0x00, 0x1c, 0x00, 0x0c, 0x1c, 0x30, 0x0c, 0x00, 
  0x00, 0x0c, 0x06, 0x0e, 0x18, 0x30, 0x0c, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x38, 0x00, 0x0c, 0x00, 
  0x00, 0x0c, 0x00, 0x07, 0xf0, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0xe0, 0x00, 0x0c, 0x00, 
  0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0e, 0x00, 0x1f, 0xff, 0xf8, 0x1c, 0x00, 
  0x00, 0x06, 0x03, 0xff, 0xff, 0xff, 0xdc, 0x00, 0x00, 0x06, 0x3f, 0xf8, 0x00, 0x1f, 0xf8, 0x00, 
  0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x18, 0x00, 
  0x00, 0x07, 0x00, 0x00, 0xff, 0x80, 0x18, 0x00, 0x00, 0x07, 0x00, 0x7f, 0xff, 0xff, 0x1c, 0x00, 
  0x00, 0x07, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0x7f, 0xc0, 0x00, 0x01, 0xfc, 0x00, 
  0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x01, 0xf8, 0x00, 
  0x00, 0x03, 0xe0, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'image_8', 64x64px
const unsigned char coronaimage_8 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x06, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3c, 0x78, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3e, 0x0f, 0xe0, 0x00, 0x00, 0x00, 
  0x01, 0xe0, 0x0f, 0x3e, 0x78, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x1f, 0xf8, 0x3e, 0x00, 0x00, 0x00, 
  0x00, 0x78, 0x3d, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x70, 0xf0, 0x07, 0x80, 0x00, 0x00, 
  0x00, 0x7e, 0xe0, 0x30, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x67, 0xc0, 0x38, 0x1c, 0x03, 0xf0, 0x00, 
  0x00, 0x63, 0x80, 0x18, 0x18, 0x03, 0xfe, 0x00, 0x00, 0x63, 0x80, 0x38, 0x18, 0x01, 0x9e, 0x00, 
  0x00, 0x63, 0x80, 0x38, 0x18, 0x01, 0x8e, 0x00, 0x00, 0x61, 0xc0, 0x70, 0x18, 0x01, 0x8c, 0x00, 
  0x00, 0x60, 0xf1, 0xe0, 0x1c, 0x03, 0x8c, 0x00, 0x00, 0x60, 0x7f, 0xc0, 0x0f, 0x0f, 0x0c, 0x00, 
  0x00, 0x70, 0x1f, 0x07, 0x87, 0xfe, 0x1c, 0x00, 0x00, 0x70, 0x00, 0x0f, 0xc1, 0xf8, 0x18, 0x00, 
  0x00, 0x70, 0x00, 0x1c, 0xe0, 0x00, 0x18, 0x00, 0x00, 0x70, 0x00, 0x38, 0x60, 0x00, 0x18, 0x00, 
  0x00, 0x30, 0x00, 0x30, 0x70, 0x00, 0x18, 0x00, 0x00, 0x30, 0x18, 0x30, 0x70, 0x00, 0x38, 0x00, 
  0x00, 0x30, 0x18, 0x30, 0x60, 0x40, 0x30, 0x00, 0x00, 0x30, 0x00, 0x18, 0x60, 0xc0, 0x30, 0x00, 
  0x00, 0x30, 0x00, 0x1c, 0xe0, 0x40, 0x30, 0x00, 0x00, 0x30, 0x00, 0x0f, 0xc0, 0x00, 0x30, 0x00, 
  0x00, 0x30, 0x00, 0x07, 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
  0x00, 0x31, 0xff, 0xff, 0xf8, 0x00, 0x60, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x60, 0x00, 
  0x00, 0x3f, 0x80, 0x00, 0x0f, 0xfc, 0x60, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x30, 0x3f, 0xff, 0xc0, 0x00, 0xc0, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0xc0, 0x00, 0x00, 0x3f, 0xf0, 0x01, 0xff, 0xf0, 0xc0, 0x00, 
  0x00, 0x3c, 0x00, 0x00, 0x01, 0xfe, 0xc0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
  0x00, 0x07, 0xff, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'image_9', 64x64px
const unsigned char coronaimage_9 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1e, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x3c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x80, 0x00, 0x00, 
  0x00, 0x0f, 0xc0, 0x70, 0x07, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x30, 0x0e, 0x03, 0xc0, 0x00, 
  0x00, 0x79, 0x80, 0x38, 0x1c, 0x03, 0xfc, 0x00, 0x00, 0x63, 0x80, 0x18, 0x18, 0x01, 0xfe, 0x00, 
  0x00, 0x63, 0x80, 0x18, 0x18, 0x01, 0x86, 0x00, 0x00, 0x63, 0x80, 0x18, 0x18, 0x01, 0x8e, 0x00, 
  0x00, 0x71, 0x80, 0x38, 0x18, 0x01, 0x8e, 0x00, 0x00, 0x71, 0xc0, 0x30, 0x1c, 0x01, 0x8c, 0x00, 
  0x00, 0x70, 0xe0, 0xf0, 0x0c, 0x03, 0x8c, 0x00, 0x00, 0x30, 0x7f, 0xe0, 0x0f, 0x0f, 0x0c, 0x00, 
  0x00, 0x30, 0x3f, 0x80, 0x07, 0xfe, 0x0c, 0x00, 0x00, 0x30, 0x00, 0x07, 0x81, 0xf8, 0x1c, 0x00, 
  0x00, 0x30, 0x00, 0x0f, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x30, 0x00, 0x1c, 0x60, 0x00, 0x18, 0x00, 
  0x00, 0x30, 0x00, 0x18, 0x70, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x18, 0x30, 0x00, 0x18, 0x00, 
  0x00, 0x30, 0x00, 0x18, 0x30, 0x00, 0x18, 0x00, 0x00, 0x30, 0x18, 0x18, 0x30, 0x40, 0x38, 0x00, 
  0x00, 0x38, 0x08, 0x18, 0x70, 0x60, 0x30, 0x00, 0x00, 0x38, 0x00, 0x1c, 0x60, 0x40, 0x30, 0x00, 
  0x00, 0x38, 0x00, 0x0f, 0xe0, 0x00, 0x30, 0x00, 0x00, 0x18, 0x00, 0x07, 0xc0, 0x00, 0x30, 0x00, 
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x60, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x60, 0x00, 
  0x00, 0x1f, 0xfb, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x60, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'image_10', 64x64px
const unsigned char coronaimage_10 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1e, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x80, 0x00, 0x00, 
  0x00, 0x01, 0xc0, 0xf0, 0x07, 0x03, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x30, 0x0e, 0x03, 0xf8, 0x00, 
  0x00, 0x7f, 0x80, 0x38, 0x1c, 0x01, 0xfe, 0x00, 0x00, 0x71, 0x80, 0x18, 0x18, 0x01, 0xce, 0x00, 
  0x00, 0x61, 0x80, 0x18, 0x18, 0x01, 0xc6, 0x00, 0x00, 0x71, 0x80, 0x18, 0x18, 0x01, 0xc6, 0x00, 
  0x00, 0x71, 0x80, 0x18, 0x18, 0x01, 0x8e, 0x00, 0x00, 0x31, 0xc0, 0x38, 0x1c, 0x01, 0x8e, 0x00, 
  0x00, 0x30, 0xc0, 0x30, 0x0e, 0x03, 0x8c, 0x00, 0x00, 0x30, 0xf0, 0xf0, 0x07, 0x07, 0x0c, 0x00, 
  0x00, 0x30, 0x7f, 0xe0, 0x03, 0xfe, 0x0c, 0x00, 0x00, 0x30, 0x1f, 0x80, 0x01, 0xfc, 0x0c, 0x00, 
  0x00, 0x30, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x00, 0x00, 0x38, 0x00, 0x07, 0xe0, 0x00, 0x0c, 0x00, 
  0x00, 0x38, 0x00, 0x0e, 0x70, 0x00, 0x1c, 0x00, 0x00, 0x18, 0x00, 0x0c, 0x30, 0x00, 0x1c, 0x00, 
  0x00, 0x18, 0x00, 0x1c, 0x18, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x18, 0x18, 0x00, 0x18, 0x00, 
  0x00, 0x18, 0x0c, 0x1c, 0x18, 0x60, 0x18, 0x00, 0x00, 0x18, 0x0c, 0x0c, 0x30, 0x60, 0x18, 0x00, 
  0x00, 0x18, 0x00, 0x0e, 0x70, 0x00, 0x18, 0x00, 0x00, 0x1c, 0x00, 0x07, 0xe0, 0x00, 0x18, 0x00, 
  0x00, 0x1c, 0x00, 0x03, 0xc0, 0x00, 0x38, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const int coronaallArray_LEN = 10;
const unsigned char* coronaallArray[10] = {
  coronaimage_1,
  coronaimage_10,
  coronaimage_2,
  coronaimage_3,
  coronaimage_4,
  coronaimage_5,
  coronaimage_6,
  coronaimage_7,
  coronaimage_8,
  coronaimage_9
};
int frame = 0;
int invert = 0;

//Valores del Control
float LHoN=0,R2=0,L2=0,CRight=0,CLeft=0;



//Controlador Motores
const byte MotorA[]={13,27,12};
const byte MotorB[]={14,5,4};
const byte MotorC[]={23,18,19};
const byte MotorD[]={32,26,25};



//Creación del PWM para la ESP32
const uint16_t Frecuencia = 5000;
const byte Resolucion = 10;
const byte Canales[] ={0,1,2,3};

//Variables de Control de Velocidad
uint16_t velocidades[]={0,0,0,0};

//Variables para Utilización del Turbo
bool Turbo = false, in=true, Co=true, bR2,bL2,cuabtn,trianbtn,circbtn,xbtn,cup;
const byte Led=2;

void setup() {
  //Inicialización de la Comunicación Serial
  Serial.begin(115200);

  //Inicialización de la libreria para la Comunicación del Control de PS5
  ps5.begin("E8:47:3A:3D:07:A5");

  //Inicialización de los Pines para el Control de los Motores
  Inicialiar_Pines();

  //Creación del PWM
  CrearPWM();

  //Pantalla
  Pantalla();
}

void loop() {

  //Inicio de Logica
  if (ps5.isConnected()) {


    //Control Conectado

    //Leer valores del Control
    LHoN=ps5.LStickX(); //Joystick Izquierdo Horizontal Normalizado
    R2=floor(((float)ps5.R2Value()/255)*1023);//Gatillo RT
    L2=floor(((float)ps5.L2Value()/255)*1023);//Gatillo LT
    bR2=ps5.R2();
    bL2=ps5.L2();
    CRight=ps5.Right();
    CLeft=ps5.Left();
    cuabtn=ps5.Square();
    trianbtn=ps5.Triangle();
    circbtn=ps5.Circle();
    xbtn=ps5.Cross();
    cup=ps5.Up();


    if(cuabtn && cup){
      Serial.println("Boton Cuadrado");
      sofiascorona();
    }else if(trianbtn){
      angry();
    }else if(circbtn){
      cute();
    }else if(xbtn){
      parpadeo();
      display.display();
    }

    //Giro Sobre si mismo
    //Derecha
    if(CRight){
      //Motor A
      ledcWrite(Canales[0],700);
      digitalWrite(MotorA[1],LOW);
      digitalWrite(MotorA[2],HIGH);
      //Motor B 
      ledcWrite(Canales[1],700);
      digitalWrite(MotorB[1],HIGH);
      digitalWrite(MotorB[2],LOW);
      //Motor C
      ledcWrite(Canales[2],700);
      digitalWrite(MotorC[1],HIGH);
      digitalWrite(MotorC[2],LOW);
      //Motor D
      ledcWrite(Canales[3],700);
      digitalWrite(MotorD[1],LOW);
      digitalWrite(MotorD[2],HIGH);
      //Impresión
      Serial.println("Derecha Cruceta");
    }
    //Izquierda
    else if (CLeft){
      //Motor A
        ledcWrite(Canales[0],700);
        digitalWrite(MotorA[1],HIGH);
        digitalWrite(MotorA[2],LOW);
        //Motor B 
        ledcWrite(Canales[1],700);
        digitalWrite(MotorB[1],LOW);
        digitalWrite(MotorB[2],HIGH);
        //Motor C
        ledcWrite(Canales[2],700);
        digitalWrite(MotorC[1],LOW);
        digitalWrite(MotorC[2],HIGH);
        //Motor D
        ledcWrite(Canales[3],700);
        digitalWrite(MotorD[1],HIGH);
        digitalWrite(MotorD[2],LOW);
        //Impresión
        Serial.println("Izquierda Cruceta");
    }


    //Derecha
    else if (LHoN >20) {

      //Sin gatillos
      if(!(bR2 or bL2)){
        //Motor A
        ledcWrite(Canales[0],50);
        digitalWrite(MotorA[1],LOW);
        digitalWrite(MotorA[2],HIGH);
        //Motor B 
        ledcWrite(Canales[1],700);
        digitalWrite(MotorB[1],HIGH);
        digitalWrite(MotorB[2],LOW);
        //Motor C
        ledcWrite(Canales[2],700);
        digitalWrite(MotorC[1],HIGH);
        digitalWrite(MotorC[2],LOW);
        //Motor D
        ledcWrite(Canales[3],50);
        digitalWrite(MotorD[1],LOW);
          digitalWrite(MotorD[2],HIGH);
        //Impresión
        Serial.println("Derecha Sin Gatillos");
      }

      //Adelante
      if(bR2){

        //Sin Turbo
        if(!Turbo){

          //Velocidades de los Motores
          velocidades[0]=R2-300;
          velocidades[1]=R2;
          velocidades[2]=R2;
          velocidades[3]=R2-300;
          //Limitaciones de los Motores
          velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
          velocidades[0] = (velocidades[0] > 100) ? 100 : velocidades[0];
          velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
          velocidades[1] = (velocidades[1] > 500) ? 500 : velocidades[1];
          velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
          velocidades[2] = (velocidades[2] > 500) ? 500 : velocidades[2];
          velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];
          velocidades[3] = (velocidades[3] > 100) ? 100 : velocidades[3];

          //Motor A
          ledcWrite(Canales[0],velocidades[0]);
          digitalWrite(MotorA[1],HIGH);
          digitalWrite(MotorA[2],LOW);
          //Motor B 
          ledcWrite(Canales[1],velocidades[1]);
          digitalWrite(MotorB[1],HIGH);
          digitalWrite(MotorB[2],LOW);
          //Motor C
          ledcWrite(Canales[2],velocidades[2]);
          digitalWrite(MotorC[1],HIGH);
          digitalWrite(MotorC[2],LOW);
          //Motor D
          ledcWrite(Canales[3],velocidades[3]);
          digitalWrite(MotorD[1],HIGH);
          digitalWrite(MotorD[2],LOW);
          //Impresión
          Serial.println("Derecha");
        }
        if(Turbo){
          //Velocidades de los Motores
          velocidades[0]=R2-700;
          velocidades[1]=R2;
          velocidades[2]=R2;
          velocidades[3]=R2-700;

          //Limitaciones de los Motores
          velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
          velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
          velocidades[1] = (velocidades[1] > 10 && velocidades[1]< 500) ? velocidades[1]+500 : (velocidades[1] >= 1000) ? 1000 : velocidades[1];
          velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
          velocidades[2] = (velocidades[2] > 10 && velocidades[2]< 500) ? velocidades[2]+500 : (velocidades[2] >= 1000) ? 1000 : velocidades[2];
          velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];

        
          //Motor A
          ledcWrite(Canales[0],velocidades[0]);
          digitalWrite(MotorA[1],HIGH);
          digitalWrite(MotorA[2],LOW);
          //Motor B 
          ledcWrite(Canales[1],velocidades[1]);
          digitalWrite(MotorB[1],HIGH);
          digitalWrite(MotorB[2],LOW);
          //Motor C
          ledcWrite(Canales[2],velocidades[2]);
          digitalWrite(MotorC[1],HIGH);
          digitalWrite(MotorC[2],LOW);
          //Motor D
          ledcWrite(Canales[3],velocidades[3]);
          digitalWrite(MotorD[1],HIGH);
          digitalWrite(MotorD[2],LOW);
          //Impresión
          Serial.println("Derecha Turbo");
        }
      }
      //Atrás
      else if(bL2){
        if(!Turbo){

          //Velocidades de los Motores
          velocidades[0]=L2-300;
          velocidades[1]=L2;
          velocidades[2]=L2;
          velocidades[3]=L2-300;
          //Limitaciones de los Motores
          velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
          velocidades[0] = (velocidades[0] > 100) ? 100 : velocidades[0];
          velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
          velocidades[1] = (velocidades[1] > 500) ? 500 : velocidades[1];
          velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
          velocidades[2] = (velocidades[2] > 500) ? 500 : velocidades[2];
          velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];
          velocidades[3] = (velocidades[3] > 100) ? 100 : velocidades[3];

          //Motor A
          ledcWrite(Canales[0],velocidades[0]);
          digitalWrite(MotorA[1],LOW);
          digitalWrite(MotorA[2],HIGH);
          //Motor B 
          ledcWrite(Canales[1],velocidades[1]);
          digitalWrite(MotorB[1],LOW);
          digitalWrite(MotorB[2],HIGH);
          //Motor C
          ledcWrite(Canales[2],velocidades[2]);
          digitalWrite(MotorC[1],LOW);
          digitalWrite(MotorC[2],HIGH);
          //Motor D
          ledcWrite(Canales[3],velocidades[3]);
          digitalWrite(MotorD[1],LOW);
          digitalWrite(MotorD[2],HIGH);
          //Impresión
          Serial.println("Derecha Atras");
        }
        if(Turbo){

          //Velocidades de los Motores
          velocidades[0]=L2-700;
          velocidades[1]=L2;
          velocidades[2]=L2;
          velocidades[3]=L2-700;

          //Limitaciones de los Motores
          velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
          velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
          velocidades[1] = (velocidades[1] > 10 && velocidades[1]< 500) ? velocidades[1]+500 : (velocidades[1] >= 1000) ? 1000 : velocidades[1];
          velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
          velocidades[2] = (velocidades[2] > 10 && velocidades[2]< 500) ? velocidades[2]+500 : (velocidades[2] >= 1000) ? 1000 : velocidades[2];
          velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];

        
          //Motor A
          ledcWrite(Canales[0],velocidades[0]);
          digitalWrite(MotorA[1],LOW);
          digitalWrite(MotorA[2],HIGH);
          //Motor B 
          ledcWrite(Canales[1],velocidades[1]);
          digitalWrite(MotorB[1],LOW);
          digitalWrite(MotorB[2],HIGH);
          //Motor C
          ledcWrite(Canales[2],velocidades[2]);
          digitalWrite(MotorC[1],LOW);
          digitalWrite(MotorC[2],HIGH);
          //Motor D
          ledcWrite(Canales[3],velocidades[3]);
          digitalWrite(MotorD[1],LOW);
          digitalWrite(MotorD[2],HIGH);
          //Impresión
          Serial.println("Derecha Atras Turbo");
        }  
      }
      
    }

    //Izquierda
    else if(LHoN <-20){

      //Sin gatillos
      if(!(bR2 or bL2)){
        //Motor A
        ledcWrite(Canales[0],700);
        digitalWrite(MotorA[1],HIGH);
        digitalWrite(MotorA[2],LOW);
        //Motor B 
        ledcWrite(Canales[1],50);
        digitalWrite(MotorB[1],LOW);
        digitalWrite(MotorB[2],HIGH);
        //Motor C
        ledcWrite(Canales[2],50);
        digitalWrite(MotorC[1],LOW);
        digitalWrite(MotorC[2],HIGH);
        //Motor D
        ledcWrite(Canales[3],700);
        digitalWrite(MotorD[1],HIGH);
        digitalWrite(MotorD[2],LOW);
        //Impresión
        Serial.println("Izquierda Sin Gatillos");
      }
      //Adelante

      if(bR2){
        if(!Turbo){

          //Velocidades de los Motores
          velocidades[0]=R2;
          velocidades[1]=R2-300;
          velocidades[2]=R2-300;
          velocidades[3]=R2;
          //Limitaciones de los Motores
          velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
          velocidades[0] = (velocidades[0] > 500) ? 500 : velocidades[0];
          velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
          velocidades[1] = (velocidades[1] > 100) ? 100 : velocidades[1];
          velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
          velocidades[2] = (velocidades[2] > 100) ? 100 : velocidades[2];
          velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];
          velocidades[3] = (velocidades[3] > 500) ? 500 : velocidades[3];

          //Motor A
          ledcWrite(Canales[0],velocidades[0]);
          digitalWrite(MotorA[1],HIGH);
          digitalWrite(MotorA[2],LOW);
          //Motor B 
          ledcWrite(Canales[1],velocidades[1]);
          digitalWrite(MotorB[1],HIGH);
          digitalWrite(MotorB[2],LOW);
          //Motor C
          ledcWrite(Canales[2],velocidades[2]);
          digitalWrite(MotorC[1],HIGH);
          digitalWrite(MotorC[2],LOW);
          //Motor D
          ledcWrite(Canales[3],velocidades[3]);
          digitalWrite(MotorD[1],HIGH);
          digitalWrite(MotorD[2],LOW);
          //Impresión
          Serial.println("Izquierda");
        }
        if(Turbo){

          //Velocidades de los Motores
          velocidades[0]=R2;
          velocidades[1]=R2-700;
          velocidades[2]=R2-700;
          velocidades[3]=R2;

          //Limitaciones de los Motores
          velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
          velocidades[0] = (velocidades[0] > 10 && velocidades[0]< 500) ? velocidades[0]+500 : (velocidades[0] >= 1000) ? 1000 : velocidades[0];
          velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
          velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
          velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];
          velocidades[3] = (velocidades[3] > 10 && velocidades[3]< 500) ? velocidades[3]+500 : (velocidades[3] >= 1000) ? 1000 : velocidades[3];
        

        
          //Motor A
          ledcWrite(Canales[0],velocidades[0]);
          digitalWrite(MotorA[1],HIGH);
          digitalWrite(MotorA[2],LOW);
          //Motor B 
          ledcWrite(Canales[1],velocidades[1]);
          digitalWrite(MotorB[1],HIGH);
          digitalWrite(MotorB[2],LOW);
          //Motor C
          ledcWrite(Canales[2],velocidades[2]);
          digitalWrite(MotorC[1],HIGH);
          digitalWrite(MotorC[2],LOW);
          //Motor D
          ledcWrite(Canales[3],velocidades[3]);
          digitalWrite(MotorD[1],HIGH);
          digitalWrite(MotorD[2],LOW);
          //Impresión
          Serial.println("Izquierda Turbo");
        }
      }

      //Atrás

      if(bL2){
        if(!Turbo){

          
          //Velocidades de los Motores
          velocidades[0]=L2;
          velocidades[1]=L2-300;
          velocidades[2]=L2-300;
          velocidades[3]=L2;
          //Limitaciones de los Motores
          velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
          velocidades[0] = (velocidades[0] > 500) ? 500 : velocidades[0];
          velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
          velocidades[1] = (velocidades[1] > 100) ? 100 : velocidades[1];
          velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
          velocidades[2] = (velocidades[2] > 100) ? 100 : velocidades[2];
          velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];
          velocidades[3] = (velocidades[3] > 500) ? 500 : velocidades[3];

          //Motor A
          ledcWrite(Canales[0],velocidades[0]);
          digitalWrite(MotorA[1],LOW);
          digitalWrite(MotorA[2],HIGH);
          //Motor B 
          ledcWrite(Canales[1],velocidades[1]);
          digitalWrite(MotorB[1],LOW);
          digitalWrite(MotorB[2],HIGH);
          //Motor C
          ledcWrite(Canales[2],velocidades[2]);
          digitalWrite(MotorC[1],LOW);
          digitalWrite(MotorC[2],HIGH);
          //Motor D
          ledcWrite(Canales[3],velocidades[3]);
          digitalWrite(MotorD[1],LOW);
          digitalWrite(MotorD[2],HIGH);
          //Impresión
          Serial.println("Izquierda Atras");
        }
        if(Turbo){

          
          //Velocidades de los Motores
          velocidades[0]=L2;
          velocidades[1]=L2-700;
          velocidades[2]=L2-700;
          velocidades[3]=L2;

          //Limitaciones de los Motores
          velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
          velocidades[0] = (velocidades[0] > 10 && velocidades[0]< 500) ? velocidades[0]+500 : (velocidades[0] >= 1000) ? 1000 : velocidades[0];
          velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
          velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
          velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];
          velocidades[3] = (velocidades[3] > 10 && velocidades[3]< 500) ? velocidades[3]+500 : (velocidades[3] >= 1000) ? 1000 : velocidades[3];
          

        
          //Motor A
          ledcWrite(Canales[0],velocidades[0]);
          digitalWrite(MotorA[1],LOW);
          digitalWrite(MotorA[2],HIGH);
          //Motor B 
          ledcWrite(Canales[1],velocidades[1]);
          digitalWrite(MotorB[1],LOW);
          digitalWrite(MotorB[2],HIGH);
          //Motor C
          ledcWrite(Canales[2],velocidades[2]);
          digitalWrite(MotorC[1],LOW);
          digitalWrite(MotorC[2],HIGH);
          //Motor D
          ledcWrite(Canales[3],velocidades[3]);
          digitalWrite(MotorD[1],LOW);
          digitalWrite(MotorD[2],HIGH);
          //Impresión
          Serial.println("Izquierda Atras Turbo");
        }
      }
    }

    //Adelante
    else if(bR2 ){
      if(!Turbo){

        //Velocidades de los Motores
        velocidades[0]=R2;
        velocidades[1]=R2;
        velocidades[2]=R2;
        velocidades[3]=R2;
        Serial.print("R2: ");
        Serial.println(R2);

        //Limitaciones de los Motores
        velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
        velocidades[0] = (velocidades[0] > 800) ? 800 : velocidades[0];
        velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
        velocidades[1] = (velocidades[1] > 800) ? 800 : velocidades[1];
        velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
        velocidades[2] = (velocidades[2] > 800) ? 800 : velocidades[2];
        velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];
        velocidades[3] = (velocidades[3] > 800) ? 800 : velocidades[3];

        //Motor A
        ledcWrite(Canales[0],velocidades[0]);
        digitalWrite(MotorA[1],HIGH);
        digitalWrite(MotorA[2],LOW);
        //Motor B 
        ledcWrite(Canales[1],velocidades[1]);
        digitalWrite(MotorB[1],HIGH);
        digitalWrite(MotorB[2],LOW);
        //Motor C
        ledcWrite(Canales[2],velocidades[2]);
        digitalWrite(MotorC[1],HIGH);
        digitalWrite(MotorC[2],LOW);
        //Motor D
        ledcWrite(Canales[3],velocidades[3]);
        digitalWrite(MotorD[1],HIGH);
        digitalWrite(MotorD[2],LOW);
        //Impresión
        Serial.println("Adelante");
      }else if(Turbo){
        //Velocidades de los Motores
        velocidades[0]=R2;
        velocidades[1]=R2;
        velocidades[2]=R2;
        velocidades[3]=R2;

        //Limitaciones de los Motores
        velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
        velocidades[0] = (velocidades[0] > 10 && velocidades[0]< 500) ? velocidades[0]+500 : (velocidades[0] >= 1000) ? 1000 : velocidades[0];
        velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
        velocidades[1] = (velocidades[1] > 10 && velocidades[1]< 500) ? velocidades[1]+500 : (velocidades[1] >= 1000) ? 1000 : velocidades[1];
        velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
        velocidades[2] = (velocidades[2] > 10 && velocidades[2]< 500) ? velocidades[2]+500 : (velocidades[2] >= 1000) ? 1000 : velocidades[2];
        velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];
        velocidades[3] = (velocidades[3] > 10 && velocidades[3]< 500) ? velocidades[3]+500 : (velocidades[3] >= 1000) ? 1000 : velocidades[3];
        

      
        //Motor A
        ledcWrite(Canales[0],velocidades[0]);
        digitalWrite(MotorA[1],HIGH);
        digitalWrite(MotorA[2],LOW);
        //Motor B 
        ledcWrite(Canales[1],velocidades[1]);
        digitalWrite(MotorB[1],HIGH);
        digitalWrite(MotorB[2],LOW);
        //Motor C
        ledcWrite(Canales[2],velocidades[2]);
        digitalWrite(MotorC[1],HIGH);
        digitalWrite(MotorC[2],LOW);
        //Motor D
        ledcWrite(Canales[3],velocidades[3]);
        digitalWrite(MotorD[1],HIGH);
        digitalWrite(MotorD[2],LOW);
        //Impresión
        Serial.println("Adelante Turbo");
      }
    }
    //Atrás
    else if(bL2){
      if(!Turbo){
        //Velocidades de los Motores
        velocidades[0]=L2;
        velocidades[1]=L2;
        velocidades[2]=L2;
        velocidades[3]=L2;
        Serial.print("L2: ");
        Serial.println(L2);
        //Limitaciones de los Motores
        velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
        velocidades[0] = (velocidades[0] > 800) ? 800 : velocidades[0];
        velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
        velocidades[1] = (velocidades[1] > 800) ? 800 : velocidades[1];
        velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
        velocidades[2] = (velocidades[2] > 800) ? 800 : velocidades[2];
        velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];
        velocidades[3] = (velocidades[3] > 800) ? 800 : velocidades[3];

        //Motor A
        ledcWrite(Canales[0],velocidades[0]);
        digitalWrite(MotorA[1],LOW);
        digitalWrite(MotorA[2],HIGH);
        //Motor B 
        ledcWrite(Canales[1],velocidades[1]);
        digitalWrite(MotorB[1],LOW);
        digitalWrite(MotorB[2],HIGH);
        //Motor C
        ledcWrite(Canales[2],velocidades[2]);
        digitalWrite(MotorC[1],LOW);
        digitalWrite(MotorC[2],HIGH);
        //Motor D
        ledcWrite(Canales[3],velocidades[3]);
        digitalWrite(MotorD[1],LOW);
        digitalWrite(MotorD[2],HIGH);
        //Impresión
        Serial.println("Atras");
      }else if(Turbo){

        //Velocidades de los Motores
        velocidades[0]=L2;
        velocidades[1]=L2;
        velocidades[2]=L2;
        velocidades[3]=L2;

        //Limitaciones de los Motores
        velocidades[0] = (velocidades[0] < 0) ? 0 : velocidades[0];
        velocidades[0] = (velocidades[0] > 10 && velocidades[0]< 500) ? velocidades[0]+500 : (velocidades[0] >= 1000) ? 1000 : velocidades[0];
        velocidades[1] = (velocidades[1] < 0) ? 0 : velocidades[1];
        velocidades[1] = (velocidades[1] > 10 && velocidades[1]< 500) ? velocidades[1]+500 : (velocidades[1] >= 1000) ? 1000 : velocidades[1];
        velocidades[2] = (velocidades[2] < 0) ? 0 : velocidades[2];
        velocidades[2] = (velocidades[2] > 10 && velocidades[2]< 500) ? velocidades[2]+500 : (velocidades[2] >= 1000) ? 1000 : velocidades[2];
        velocidades[3] = (velocidades[3] < 0) ? 0 : velocidades[3];
        velocidades[3] = (velocidades[3] > 10 && velocidades[3]< 500) ? velocidades[3]+500 : (velocidades[3] >= 1000) ? 1000 : velocidades[3];
        

      
        //Motor A
        ledcWrite(Canales[0],velocidades[0]);
        digitalWrite(MotorA[1],LOW);
        digitalWrite(MotorA[2],HIGH);
        //Motor B 
        ledcWrite(Canales[1],velocidades[1]);
        digitalWrite(MotorB[1],LOW);
        digitalWrite(MotorB[2],HIGH);
        //Motor C
        ledcWrite(Canales[2],velocidades[2]);
        digitalWrite(MotorC[1],LOW);
        digitalWrite(MotorC[2],HIGH);
        //Motor D
        ledcWrite(Canales[3],velocidades[3]);
        digitalWrite(MotorD[1],LOW);
        digitalWrite(MotorD[2],HIGH);
        //Impresión
        Serial.println("Atras Turbo");
      }
    }

    //Detenido
    if(!(bR2 or bL2)){
      //Motor A
      digitalWrite(MotorA[1],LOW);
      digitalWrite(MotorA[2],LOW);
      //Motor B 
      digitalWrite(MotorB[1],LOW);
      digitalWrite(MotorB[2],LOW);
      //Motor C
      digitalWrite(MotorC[1],LOW);
      digitalWrite(MotorC[2],LOW);
      //Motor D
      digitalWrite(MotorD[1],LOW);
      digitalWrite(MotorD[2],LOW);
      //Impresión
      //Serial.println("Detenido");
    }


    //Iniciar Turbo
    if(ps5.R1()  && Co){
        Turbo=!Turbo;
        Co=false;
        digitalWrite(Led,HIGH);
        Serial.print("Turbo: ");
        Serial.println(Turbo);
    }
    //Apagar Turbo
    else if(ps5.L1() && !Co){
        Turbo=!Turbo;
        Co=true;
        digitalWrite(Led,LOW);
        Serial.print("Sin Turbo: ");
        Serial.println(Turbo);
      }


    
  }
  else {
    Serial.println("Sin Conexion");
  }

}

void Inicialiar_Pines(){
  pinMode(MotorA[0],OUTPUT);
  pinMode(MotorA[1],OUTPUT);
  pinMode(MotorA[2],OUTPUT);
  pinMode(MotorB[0],OUTPUT);
  pinMode(MotorB[1],OUTPUT);
  pinMode(MotorB[2],OUTPUT);
  pinMode(MotorC[0],OUTPUT);
  pinMode(MotorC[1],OUTPUT);
  pinMode(MotorC[2],OUTPUT);
  pinMode(MotorD[0],OUTPUT);
  pinMode(MotorD[1],OUTPUT);
  pinMode(MotorD[2],OUTPUT);
  pinMode(Led,OUTPUT);
}

void CrearPWM(){
  for(int i=0;i<4;i++){
    ledcSetup(Canales[i],Frecuencia,Resolucion); 
  }
  ledcAttachPin(MotorA[0],Canales[0]);
  ledcAttachPin(MotorB[0],Canales[1]);
  ledcAttachPin(MotorC[0],Canales[2]);
  ledcAttachPin(MotorD[0],Canales[3]);
}

void Pantalla(){
  
  delay(250); // wait for the OLED to power up
  display.begin(i2c_Address, true);
  display.clearDisplay();

  display.setTextSize(4);
  display.setTextColor(SH110X_WHITE);
  display.setTextWrap(false);
  x=display.width();
  minX= -24*strlen(message);

  display.clearDisplay();
  display.fillCircle(74, 16, 4, SH110X_WHITE);
  display.fillCircle(43, 16, 4, SH110X_WHITE);
  display.fillCircle(82, 16, 4, SH110X_WHITE);
  display.fillCircle(51, 16, 4, SH110X_WHITE);
  display.fillCircle(74, 33, 4, SH110X_WHITE);
  display.fillCircle(43, 33, 4, SH110X_WHITE);
  display.fillCircle(82, 33, 4, SH110X_WHITE);
  display.fillCircle(51, 33, 4, SH110X_WHITE);
  display.fillRect(76, 12, 5, 26, SH110X_WHITE);
  display.fillRect(45, 12, 5, 26, SH110X_WHITE);
  display.fillRect(70, 18, 17, 14, SH110X_WHITE);
  display.fillRect(39, 18, 17, 14, SH110X_WHITE);
  display.drawLine(57, 52, 62, 55, SH110X_WHITE);
  display.drawLine(63, 55, 68, 52, SH110X_WHITE);
  display.display();
  

}

void sofiascorona(){
  while (x>minX) {
    display.clearDisplay();
    display.setCursor(x, 20);
    display.print(message);
    display.display();
  
    x=x-3; //scroll speed

  }

  display.clearDisplay();
  display.drawBitmap(32, 0, coronaallArray[0], FRAME_WIDTH, FRAME_HEIGHT, 1);
  display.display();
  delay(FRAME_DELAY);

  display.clearDisplay();
  display.drawBitmap(32, 0, coronaallArray[1], FRAME_WIDTH, FRAME_HEIGHT, 1);
  display.display();
  delay(FRAME_DELAY);

  display.clearDisplay();
  display.drawBitmap(32, 0, coronaallArray[2], FRAME_WIDTH, FRAME_HEIGHT, 1);
  display.display();
  delay(FRAME_DELAY);

  display.clearDisplay();
  display.drawBitmap(32, 0, coronaallArray[3], FRAME_WIDTH, FRAME_HEIGHT, 1);
  display.display();
  delay(FRAME_DELAY);

  display.clearDisplay();
  display.drawBitmap(32, 0, coronaallArray[4], FRAME_WIDTH, FRAME_HEIGHT, 1);
  display.display();
  delay(FRAME_DELAY);

  display.clearDisplay();
  display.drawBitmap(32, 0, coronaallArray[5], FRAME_WIDTH, FRAME_HEIGHT, 1);
  display.display();
  delay(FRAME_DELAY);

  display.clearDisplay();
  display.drawBitmap(32, 0, coronaallArray[6], FRAME_WIDTH, FRAME_HEIGHT, 1);
  display.display();
  delay(FRAME_DELAY);

  display.clearDisplay();
  display.drawBitmap(32, 0, coronaallArray[7], FRAME_WIDTH, FRAME_HEIGHT, 1);
  display.display();
  delay(FRAME_DELAY);

  display.clearDisplay();
  display.drawBitmap(32, 0, coronaallArray[8], FRAME_WIDTH, FRAME_HEIGHT, 1);
  display.display();
  delay(FRAME_DELAY);

  display.clearDisplay();
  display.drawBitmap(32, 0, coronaallArray[9], FRAME_WIDTH, FRAME_HEIGHT, 1);
  display.display();
  delay(FRAME_DELAY);

  x=display.width();


  display.clearDisplay();
  display.fillCircle(74, 16, 4, SH110X_WHITE);
  display.fillCircle(43, 16, 4, SH110X_WHITE);
  display.fillCircle(82, 16, 4, SH110X_WHITE);
  display.fillCircle(51, 16, 4, SH110X_WHITE);
  display.fillCircle(74, 33, 4, SH110X_WHITE);
  display.fillCircle(43, 33, 4, SH110X_WHITE);
  display.fillCircle(82, 33, 4, SH110X_WHITE);
  display.fillCircle(51, 33, 4, SH110X_WHITE);
  display.fillRect(76, 12, 5, 26, SH110X_WHITE);
  display.fillRect(45, 12, 5, 26, SH110X_WHITE);
  display.fillRect(70, 18, 17, 14, SH110X_WHITE);
  display.fillRect(39, 18, 17, 14, SH110X_WHITE);
  display.drawLine(57, 52, 62, 55, SH110X_WHITE);
  display.drawLine(63, 55, 68, 52, SH110X_WHITE);
  display.display();
}

void angry(){
  display.clearDisplay();
  display.drawLine(58, 27, 39, 18, SH110X_WHITE);
  display.fillRect(39, 22, 9, 6, SH110X_WHITE);
  display.drawLine(39, 19, 40, 19, SH110X_WHITE);
  display.drawLine(73, 27, 92, 18, SH110X_WHITE);
  display.drawLine(92, 19, 91, 19, SH110X_WHITE);
  display.drawRect(87, 20, 6, 2, SH110X_WHITE);
  display.fillRect(84, 22, 9, 6, SH110X_WHITE);
  display.fillRect(73, 28, 20, 9, SH110X_WHITE);
  display.fillRect(39, 28, 20, 9, SH110X_WHITE);
  display.drawLine(60, 51, 65, 54, SH110X_WHITE);
  display.fillRect(77, 25, 7, 3, SH110X_WHITE);
  display.fillRect(48, 25, 7, 3, SH110X_WHITE);
  display.drawLine(66, 54, 71, 51, SH110X_WHITE);
  display.drawPixel(48, 23, SH110X_WHITE);
  display.drawLine(40, 12, 59, 23, SH110X_WHITE);
  display.drawPixel(83, 23, SH110X_WHITE);
  display.drawLine(40, 11, 59, 22, SH110X_WHITE);
  display.drawLine(48, 24, 50, 24, SH110X_WHITE);
  display.drawRect(39, 20, 6, 2, SH110X_WHITE);
  display.drawLine(72, 23, 91, 12, SH110X_WHITE);
  display.drawLine(55, 27, 56, 27, SH110X_WHITE);
  display.drawLine(72, 22, 91, 11, SH110X_WHITE);
  display.drawLine(75, 27, 76, 27, SH110X_WHITE);
  display.drawLine(60, 52, 65, 55, SH110X_WHITE);
  display.drawLine(81, 24, 83, 24, SH110X_WHITE);
  display.drawLine(66, 55, 71, 52, SH110X_WHITE);
  display.display();
}

void cute(){
  display.clearDisplay();
  display.fillCircle(74, 16, 4, SH110X_WHITE);
  display.fillCircle(43, 16, 4, SH110X_WHITE);
  display.fillCircle(82, 16, 4, SH110X_WHITE);
  display.fillCircle(51, 16, 4, SH110X_WHITE);
  display.fillCircle(74, 33, 4, SH110X_WHITE);
  display.fillCircle(43, 33, 4, SH110X_WHITE);
  display.fillCircle(82, 33, 4, SH110X_WHITE);
  display.fillCircle(51, 33, 4, SH110X_WHITE);
  display.fillRect(76, 12, 5, 26, SH110X_WHITE);
  display.fillRect(45, 12, 5, 26, SH110X_WHITE);
  display.fillRect(70, 18, 17, 14, SH110X_WHITE);
  display.fillRect(39, 18, 17, 14, SH110X_WHITE);
  display.drawLine(57, 52, 62, 55, SH110X_WHITE);
  display.drawLine(63, 55, 68, 52, SH110X_WHITE);
  display.display();
}
void parpadeo(void) {
  
  display.clearDisplay();

  //open
  display.fillCircle(74, 16, 4, SH110X_WHITE);
  display.fillCircle(43, 16, 4, SH110X_WHITE);
  display.fillCircle(82, 16, 4, SH110X_WHITE);
  display.fillCircle(51, 16, 4, SH110X_WHITE);
  display.fillCircle(74, 33, 4, SH110X_WHITE);
  display.fillCircle(43, 33, 4, SH110X_WHITE);
  display.fillCircle(82, 33, 4, SH110X_WHITE);
  display.fillCircle(51, 33, 4, SH110X_WHITE);
  display.fillRect(76, 12, 5, 26, SH110X_WHITE);
  display.fillRect(45, 12, 5, 26, SH110X_WHITE);
  display.fillRect(70, 18, 17, 14, SH110X_WHITE);
  display.fillRect(39, 18, 17, 14, SH110X_WHITE);
  display.drawLine(57, 52, 62, 55, SH110X_WHITE);
  display.drawLine(63, 55, 68, 52, SH110X_WHITE);

  display.display();
  display.clearDisplay();
  delay(FRAME_DELAY);

  //close
  display.fillRect(41, 28, 16, 4, SH110X_WHITE);
  display.fillRect(71, 28, 16, 4, SH110X_WHITE);
  display.drawLine(57, 52, 62, 55, SH110X_WHITE);
  display.drawLine(63, 55, 68, 52, SH110X_WHITE);

  display.display();
  display.clearDisplay();
  delay(FRAME_DELAY);

  //open
  display.fillCircle(74, 16, 4, SH110X_WHITE);
  display.fillCircle(43, 16, 4, SH110X_WHITE);
  display.fillCircle(82, 16, 4, SH110X_WHITE);
  display.fillCircle(51, 16, 4, SH110X_WHITE);
  display.fillCircle(74, 33, 4, SH110X_WHITE);
  display.fillCircle(43, 33, 4, SH110X_WHITE);
  display.fillCircle(82, 33, 4, SH110X_WHITE);
  display.fillCircle(51, 33, 4, SH110X_WHITE);
  display.fillRect(76, 12, 5, 26, SH110X_WHITE);
  display.fillRect(45, 12, 5, 26, SH110X_WHITE);
  display.fillRect(70, 18, 17, 14, SH110X_WHITE);
  display.fillRect(39, 18, 17, 14, SH110X_WHITE);
  display.drawLine(57, 52, 62, 55, SH110X_WHITE);
  display.drawLine(63, 55, 68, 52, SH110X_WHITE);

  display.display();
  delay(FRAME_DELAY);
}
